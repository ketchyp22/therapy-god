// ==================== –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–´ ====================
let gameState = {
    currentSystem: 'cardiovascular',
    currentCases: [],
    currentCaseIndex: 0,
    score: 0,
    selectedOption: null,
    totalCases: 5
};

// ==================== –ö–õ–ò–ù–ò–ß–ï–°–ö–ò–ï –°–õ–£–ß–ê–ò ====================
let clinicalCases = {};

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================
document.addEventListener('DOMContentLoaded', async function() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TherapyGod...');
    
    try {
        await loadClinicalCases();
        console.log('–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª—É—á–∞–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        setupEventHandlers();
        console.log('TherapyGod –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    } catch (error) {
        console.error('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª—É—á–∞–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    }
});

// ==================== –ó–ê–ì–†–£–ó–ö–ê –°–õ–£–ß–ê–ï–í –ò–ó –ü–ê–ü–ö–ò CASES ====================
async function loadClinicalCases() {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–ª—É—á–∞–µ–≤ –∏–∑ –ø–∞–ø–∫–∏ cases/...');
    
    const caseFiles = [
        { file: 'cases/cardiovascular.js', variable: 'cardiovascularCases', system: 'cardiovascular' },
        { file: 'cases/respiratory.js', variable: 'respiratoryCases', system: 'respiratory' },
        { file: 'cases/gastrointestinal.js', variable: 'gastrointestinalCases', system: 'gastrointestinal' },
        { file: 'cases/nervous.js', variable: 'nervousCases', system: 'nervous' },
        { file: 'cases/endocrine.js', variable: 'endocrineCases', system: 'endocrine' },
        { file: 'cases/renal.js', variable: 'renalCases', system: 'renal' }
    ];

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    for (const caseFile of caseFiles) {
        try {
            console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º ${caseFile.file}...`);
            await loadScriptViaPolitics(caseFile.file);
            console.log(`‚úì –§–∞–π–ª ${caseFile.file} –∑–∞–≥—Ä—É–∂–µ–Ω`);
        } catch (error) {
            console.error(`‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${caseFile.file}:`, error);
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª ${caseFile.file}`);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã
    console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...');
    
    clinicalCases = {};
    let totalCasesLoaded = 0;

    for (const caseFile of caseFiles) {
        const cases = window[caseFile.variable];
        
        if (!cases) {
            console.error(`–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${caseFile.variable} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ ${caseFile.file}`);
            throw new Error(`–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${caseFile.variable} –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ ${caseFile.file}`);
        }
        
        if (!Array.isArray(cases)) {
            console.error(`${caseFile.variable} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:`, cases);
            throw new Error(`${caseFile.variable} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º`);
        }
        
        clinicalCases[caseFile.system] = cases;
        totalCasesLoaded += cases.length;
        
        console.log(`‚úì ${caseFile.system}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${cases.length} —Å–ª—É—á–∞–µ–≤`);
    }

    if (totalCasesLoaded === 0) {
        throw new Error('–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–ª—É—á–∞—è');
    }

    console.log(`üéâ –£–°–ü–ï–®–ù–û! –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${totalCasesLoaded} –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤`);
    console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤:', clinicalCases);
}

// ==================== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –°–ö–†–ò–ü–¢–û–í ====================
async function loadScriptViaPolitics(src) {
    console.log(`üîÑ –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞–≥—Ä—É–∑–∫–∏: ${src}`);
    
    // –°–ø–æ—Å–æ–± 1: Fetch + eval (–Ω–∞–∏–±–æ–ª–µ–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –í–ö)
    try {
        console.log(`üì• –°–ø–æ—Å–æ–± 1 - fetch: ${src}`);
        const response = await fetch(src, {
            method: 'GET',
            cache: 'no-cache',
            headers: {
                'Content-Type': 'application/javascript'
            }
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const scriptContent = await response.text();
        
        if (!scriptContent || scriptContent.trim().length === 0) {
            throw new Error('–ü—É—Å—Ç–æ–π —Ñ–∞–π–ª');
        }
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
        const script = document.createElement('script');
        script.textContent = scriptContent;
        script.setAttribute('data-source', src);
        document.head.appendChild(script);
        
        console.log(`‚úÖ Fetch –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞: ${src}`);
        return;
        
    } catch (fetchError) {
        console.warn(`‚ùå Fetch –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è ${src}:`, fetchError.message);
    }
    
    // –°–ø–æ—Å–æ–± 2: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ script —Ç–µ–≥–∞
    try {
        console.log(`üì• –°–ø–æ—Å–æ–± 2 - script tag: ${src}`);
        await loadScriptClassic(src);
        console.log(`‚úÖ Script tag –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞: ${src}`);
        return;
        
    } catch (scriptError) {
        console.warn(`‚ùå Script tag –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è ${src}:`, scriptError.message);
    }
    
    // –°–ø–æ—Å–æ–± 3: XMLHttpRequest (–¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤)
    try {
        console.log(`üì• –°–ø–æ—Å–æ–± 3 - XMLHttpRequest: ${src}`);
        await loadScriptXHR(src);
        console.log(`‚úÖ XHR –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞: ${src}`);
        return;
        
    } catch (xhrError) {
        console.warn(`‚ùå XHR –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è ${src}:`, xhrError.message);
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
    throw new Error(`–í—Å–µ —Å–ø–æ—Å–æ–±—ã –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–ª—è ${src}`);
}

// ==================== –ö–õ–ê–°–°–ò–ß–ï–°–ö–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –°–ö–†–ò–ü–¢–û–í ====================
function loadScriptClassic(src) {
    return new Promise((resolve, reject) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ —Å–∫—Ä–∏–ø—Ç
        const existingScript = document.querySelector(`script[src="${src}"]`);
        if (existingScript) {
            console.log(`–°–∫—Ä–∏–ø—Ç ${src} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω`);
            resolve();
            return;
        }

        const script = document.createElement('script');
        script.src = src;
        script.type = 'text/javascript';
        script.async = false; // –í–∞–∂–Ω–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        const timeout = setTimeout(() => {
            script.remove();
            reject(new Error(`–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞ ${src}`));
        }, 15000); // 15 —Å–µ–∫—É–Ω–¥

        script.onload = () => {
            clearTimeout(timeout);
            console.log(`‚úì –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: ${src}`);
            resolve();
        };
        
        script.onerror = (error) => {
            clearTimeout(timeout);
            script.remove();
            console.error(`‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞: ${src}`, error);
            reject(new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–ø—Ç: ${src}`));
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –≤ head
        document.head.appendChild(script);
        console.log(`–î–æ–±–∞–≤–ª–µ–Ω —Å–∫—Ä–∏–ø—Ç –≤ DOM: ${src}`);
    });
}

// ==================== –ó–ê–ì–†–£–ó–ö–ê –ß–ï–†–ï–ó XMLHttpRequest ====================
function loadScriptXHR(src) {
    return new Promise((resolve, reject) => {
        const xhr = new XMLHttpRequest();
        
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                    try {
                        const script = document.createElement('script');
                        script.textContent = xhr.responseText;
                        script.setAttribute('data-source', src);
                        document.head.appendChild(script);
                        resolve();
                    } catch (error) {
                        reject(new Error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ ${src}: ${error.message}`));
                    }
                } else {
                    reject(new Error(`HTTP ${xhr.status} –¥–ª—è ${src}`));
                }
            }
        };
        
        xhr.onerror = function() {
            reject(new Error(`–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${src}`));
        };
        
        xhr.ontimeout = function() {
            reject(new Error(`–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${src}`));
        };
        
        xhr.timeout = 15000; // 15 —Å–µ–∫—É–Ω–¥
        xhr.open('GET', src, true);
        xhr.send();
    });
}

// ==================== –ü–û–ö–ê–ó –û–®–ò–ë–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ ====================
function showErrorMessage(message) {
    // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    const errorDiv = document.createElement('div');
    errorDiv.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(239, 68, 68, 0.95);
        color: white;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        z-index: 10000;
        max-width: 500px;
        text-align: center;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
        font-size: 16px;
        line-height: 1.5;
    `;
    
    errorDiv.innerHTML = `
        <h3 style="margin: 0 0 15px 0; font-size: 20px;">‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
        <p style="margin: 0 0 20px 0;">${message}</p>
        <button onclick="location.reload()" style="
            background: white;
            color: #ef4444;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: bold;
            cursor: pointer;
            font-size: 14px;
        ">üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button>
    `;
    
    document.body.appendChild(errorDiv);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (errorDiv.parentNode) {
            errorDiv.parentNode.removeChild(errorDiv);
        }
    }, 10000);
}

// ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ====================
function setupEventHandlers() {
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    const startScreen = document.getElementById('start-screen');
    if (startScreen) {
        startScreen.style.display = 'block';
        startScreen.style.visibility = 'visible';
        startScreen.style.opacity = '1';
        console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª start-screen');
    }

    // –í—ã–±–æ—Ä —Å–∏—Å—Ç–µ–º—ã –æ—Ä–≥–∞–Ω–æ–≤
    const systemCards = document.querySelectorAll('.system-card');
    console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–∏—Å—Ç–µ–º: ${systemCards.length}`);
    
    systemCards.forEach(card => {
        card.addEventListener('click', () => selectSystem(card));
    });

    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const buttons = {
        'start-cases': startCases,
        'next-case': nextCase,
        'exit-cases': exitCases,
        'restart-cases': restartCases
    };

    Object.entries(buttons).forEach(([id, handler]) => {
        const element = document.getElementById(id);
        if (element) {
            element.addEventListener('click', handler);
            console.log(`‚úì –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏: ${id}`);
        } else {
            console.warn(`‚ö† –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${id}`);
        }
    });
}

// ==================== –í–´–ë–û–† –°–ò–°–¢–ï–ú–´ ====================
function selectSystem(card) {
    console.log('–í—ã–±–æ—Ä —Å–∏—Å—Ç–µ–º—ã:', card.dataset.system);
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    document.querySelectorAll('.system-card').forEach(c => c.classList.remove('active'));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π
    card.classList.add('active');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    gameState.currentSystem = card.dataset.system;
    
    console.log('–í—ã–±—Ä–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞:', gameState.currentSystem);
}

// ==================== –ó–ê–ü–£–°–ö –ò–ì–†–´ ====================
function startCases() {
    console.log('=== –ó–ê–ü–£–°–ö –ò–ì–†–´ ===');
    console.log('–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:', gameState.currentSystem);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª—É—á–∞–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if (Object.keys(clinicalCases).length === 0) {
        showErrorMessage('–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª—É—á–∞–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    const systemCases = clinicalCases[gameState.currentSystem];
    
    console.log('–°–ª—É—á–∞–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã:', systemCases);
    
    if (!systemCases || systemCases.length === 0) {
        showErrorMessage(`–°–ª—É—á–∞–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã "${gameState.currentSystem}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª cases/${gameState.currentSystem}.js`);
        return;
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${systemCases.length} —Å–ª—É—á–∞–µ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã ${gameState.currentSystem}`);

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –±–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤
    gameState.currentCases = shuffleArray([...systemCases]).slice(0, Math.min(gameState.totalCases, systemCases.length));
    
    console.log(`–í—ã–±—Ä–∞–Ω–æ ${gameState.currentCases.length} —Å–ª—É—á–∞–µ–≤ –¥–ª—è –∏–≥—Ä—ã`);

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    gameState.currentCaseIndex = 0;
    gameState.score = 0;
    gameState.selectedOption = null;

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —ç–∫—Ä–∞–Ω —Å–ª—É—á–∞—è
    const startScreen = document.getElementById('start-screen');
    const caseContainer = document.getElementById('case-container');
    
    if (startScreen) startScreen.style.display = 'none';
    if (caseContainer) {
        caseContainer.style.display = 'block';
    } else {
        console.error('–≠–ª–µ–º–µ–Ω—Ç case-container –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–ª—É—á–∞–π
    loadCase();
}

// ==================== –ó–ê–ì–†–£–ó–ö–ê –°–õ–£–ß–ê–Ø ====================
function loadCase() {
    console.log(`=== –ó–ê–ì–†–£–ó–ö–ê –°–õ–£–ß–ê–Ø ${gameState.currentCaseIndex + 1} ===`);
    
    if (gameState.currentCaseIndex >= gameState.currentCases.length) {
        console.log('–í—Å–µ —Å–ª—É—á–∞–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
        showResults();
        return;
    }

    const case_data = gameState.currentCases[gameState.currentCaseIndex];
    console.log('–î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª—É—á–∞—è:', case_data);
    
    gameState.selectedOption = null;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
    const caseCounter = document.getElementById('case-counter');
    const progressBar = document.getElementById('progress-bar');
    
    if (caseCounter) {
        caseCounter.textContent = `–°–ª—É—á–∞–π ${gameState.currentCaseIndex + 1} –∏–∑ ${gameState.currentCases.length}`;
    }
    
    if (progressBar) {
        const progress = ((gameState.currentCaseIndex) / gameState.currentCases.length) * 100;
        progressBar.style.width = `${progress}%`;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª—É—á–∞—è
    const caseContent = document.getElementById('case-content');
    if (!caseContent) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç case-content –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }
    
    caseContent.innerHTML = `
        <div class="patient-info">–ü–∞—Ü–∏–µ–Ω—Ç: ${case_data.patient}</div>
        <div class="case-description">
            <strong>–ñ–∞–ª–æ–±—ã:</strong> ${case_data.complaint}<br><br>
            <strong>–ê–Ω–∞–º–Ω–µ–∑ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è:</strong> ${case_data.history}<br><br>
            <strong>–û–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π –æ—Å–º–æ—Ç—Ä:</strong> ${case_data.examination}
        </div>
        ${case_data.additional ? `<div class="case-data"><strong>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong><br>${case_data.additional}</div>` : ''}
        <div class="case-question">${case_data.question}</div>
    `;

    // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    const optionsContainer = document.getElementById('options');
    if (!optionsContainer) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç options –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }
    
    optionsContainer.innerHTML = '';
    
    case_data.options.forEach((option, index) => {
        const optionElement = document.createElement('div');
        optionElement.classList.add('option');
        optionElement.textContent = option;
        optionElement.dataset.index = index;
        optionElement.addEventListener('click', () => selectOption(optionElement, index));
        optionsContainer.appendChild(optionElement);
    });

    console.log(`–°–æ–∑–¥–∞–Ω–æ ${case_data.options.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤`);

    // –°–∫—Ä—ã–≤–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏ –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
    const explanation = document.getElementById('explanation');
    const nextBtn = document.getElementById('next-case');
    
    if (explanation) explanation.classList.remove('show');
    if (nextBtn) nextBtn.disabled = true;

    console.log('–°–ª—É—á–∞–π –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
}

// ==================== –í–´–ë–û–† –û–¢–í–ï–¢–ê ====================
function selectOption(element, index) {
    console.log(`–í—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç ${index}`);
    
    if (gameState.selectedOption !== null) {
        console.log('–û—Ç–≤–µ—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
        return;
    }

    gameState.selectedOption = index;
    const case_data = gameState.currentCases[gameState.currentCaseIndex];
    const isCorrect = index === case_data.correct;

    console.log(`–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${case_data.correct}, –≤—ã–±—Ä–∞–Ω: ${index}, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ${isCorrect}`);

    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç—ã
    const options = document.querySelectorAll('.option');
    if (options[case_data.correct]) {
        options[case_data.correct].classList.add('correct');
    }
    
    if (!isCorrect) {
        element.classList.add('wrong');
    }

    // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    options.forEach(opt => opt.style.pointerEvents = 'none');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    const explanationText = document.getElementById('explanation-text');
    const explanation = document.getElementById('explanation');
    
    if (explanationText) explanationText.textContent = case_data.explanation;
    if (explanation) explanation.classList.add('show');

    // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª—É—á–∞—è
    const nextBtn = document.getElementById('next-case');
    if (nextBtn) nextBtn.disabled = false;

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç, –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if (isCorrect) {
        gameState.score++;
        console.log(`–°—á–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω: ${gameState.score}`);
    }
}

// ==================== –°–õ–ï–î–£–Æ–©–ò–ô –°–õ–£–ß–ê–ô ====================
function nextCase() {
    console.log('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª—É—á–∞—é');
    gameState.currentCaseIndex++;
    loadCase();
}

// ==================== –í–´–•–û–î –ò–ó –ò–ì–†–´ ====================
function exitCases() {
    console.log('–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã');
    const caseContainer = document.getElementById('case-container');
    const startScreen = document.getElementById('start-screen');
    
    if (caseContainer) caseContainer.style.display = 'none';
    if (startScreen) startScreen.style.display = 'block';
}

// ==================== –ü–ï–†–ï–ó–ê–ü–£–°–ö ====================
function restartCases() {
    console.log('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã');
    const resultsContainer = document.getElementById('results-container');
    const startScreen = document.getElementById('start-screen');
    
    if (resultsContainer) resultsContainer.style.display = 'none';
    if (startScreen) startScreen.style.display = 'block';
}

// ==================== –ü–û–ö–ê–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ====================
function showResults() {
    console.log('=== –ü–û–ö–ê–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===');
    console.log(`–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${gameState.score} –∏–∑ ${gameState.currentCases.length}`);
    
    const caseContainer = document.getElementById('case-container');
    const resultsContainer = document.getElementById('results-container');
    
    if (caseContainer) caseContainer.style.display = 'none';
    if (resultsContainer) resultsContainer.style.display = 'block';

    const percentage = Math.round((gameState.score / gameState.currentCases.length) * 100);
    console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${percentage}%`);
    
    const percentageElement = document.getElementById('percentage');
    const correctAnswers = document.getElementById('correct-answers');
    const totalQuestions = document.getElementById('total-questions');
    const resultMessage = document.getElementById('result-message');
    
    if (percentageElement) percentageElement.textContent = percentage;
    if (correctAnswers) correctAnswers.textContent = gameState.score;
    if (totalQuestions) totalQuestions.textContent = gameState.currentCases.length;

    let resultText;
    if (percentage >= 90) {
        resultText = '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è!';
    } else if (percentage >= 70) {
        resultText = '–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ!';
    } else if (percentage >= 50) {
        resultText = '–•–æ—Ä–æ—à–æ! –ï—Å—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –Ω–æ —Å—Ç–æ–∏—Ç —É–≥–ª—É–±–∏—Ç—å –∑–Ω–∞–Ω–∏—è.';
    } else {
        resultText = '–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏! –ò–∑—É—á–∞–π—Ç–µ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª—É—á–∞–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.';
    }
    
    if (resultMessage) resultMessage.textContent = resultText;
}

// ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
function shuffleArray(array) {
    const newArray = [...array];
    for (let i = newArray.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
    }
    return newArray;
}

// ==================== –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ====================
function diagnoseApp() {
    console.log('=== üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê THERAPYGOD ===');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const startScreen = document.getElementById('start-screen');
    const caseContainer = document.getElementById('case-container');
    const systemsGrid = document.querySelector('.systems-grid');
    const container = document.querySelector('.container');
    
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:');
    console.log('  start-screen –Ω–∞–π–¥–µ–Ω:', !!startScreen);
    console.log('  case-container –Ω–∞–π–¥–µ–Ω:', !!caseContainer);
    console.log('  systems-grid –Ω–∞–π–¥–µ–Ω:', !!systemsGrid);
    console.log('  container –Ω–∞–π–¥–µ–Ω:', !!container);
    
    if (startScreen) {
        const styles = getComputedStyle(startScreen);
        console.log('üëÅÔ∏è –°—Ç–∏–ª–∏ start-screen:');
        console.log('  display:', styles.display);
        console.log('  visibility:', styles.visibility);
        console.log('  opacity:', styles.opacity);
        console.log('  position:', styles.position);
        console.log('  z-index:', styles.zIndex);
        console.log('  width:', styles.width);
        console.log('  height:', styles.height);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS
    const bodyStyles = getComputedStyle(document.body);
    console.log('üé® –°—Ç–∏–ª–∏ body:');
    console.log('  background:', bodyStyles.background.substring(0, 100));
    console.log('  color:', bodyStyles.color);
    console.log('  font-family:', bodyStyles.fontFamily.substring(0, 50));
    console.log('  display:', bodyStyles.display);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSS
    const cssLinks = document.querySelectorAll('link[rel="stylesheet"]');
    console.log('üìé CSS —Ñ–∞–π–ª—ã (' + cssLinks.length + '):');
    Array.from(cssLinks).forEach((link, index) => {
        console.log(`  CSS ${index + 1}:`, link.href);
        console.log('  –ó–∞–≥—Ä—É–∂–µ–Ω:', link.sheet ? '–î–ê' : '–ù–ï–¢');
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–≥—Ä—ã
    if (typeof gameState !== 'undefined') {
        console.log('üéÆ GameState:', gameState);
    }
    
    if (typeof clinicalCases !== 'undefined') {
        console.log('üè• Clinical Cases –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', Object.keys(clinicalCases).length, '—Å–∏—Å—Ç–µ–º');
    }
    
    console.log('=== ‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===');
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞
function forceShowApp() {
    console.log('üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï');
    
    const startScreen = document.getElementById('start-screen');
    const caseContainer = document.getElementById('case-container');
    const resultsContainer = document.getElementById('results-container');
    
    if (startScreen) {
        startScreen.style.display = 'block';
        startScreen.style.visibility = 'visible';
        startScreen.style.opacity = '1';
        startScreen.style.position = 'relative';
        startScreen.style.zIndex = '1';
        console.log('‚úÖ start-screen –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑–∞–Ω');
    }
    
    if (caseContainer) {
        caseContainer.style.display = 'none';
        console.log('‚úÖ case-container —Å–∫—Ä—ã—Ç');
    }
    
    if (resultsContainer) {
        resultsContainer.style.display = 'none';
        console.log('‚úÖ results-container —Å–∫—Ä—ã—Ç');
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è body
    document.body.style.background = 'linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #0f172a 100%)';
    document.body.style.minHeight = '100vh';
    document.body.style.color = '#ffffff';
    document.body.style.display = 'flex';
    document.body.style.alignItems = 'center';
    document.body.style.justifyContent = 'center';
    
    console.log('üéØ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–Ω–æ!');
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
setTimeout(function() {
    console.log('ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...');
    diagnoseApp();
}, 3000);
