// ==================== –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–´ ====================
let gameState = {
    currentSystem: 'cardiovascular',
    currentCases: [],
    currentCaseIndex: 0,
    score: 0,
    selectedOption: null,
    totalCases: 5
};

// ==================== –ö–õ–ò–ù–ò–ß–ï–°–ö–ò–ï –°–õ–£–ß–ê–ò ====================
let clinicalCases = {};
let loadingAttempts = 0;
const MAX_LOADING_ATTEMPTS = 3;

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø –í–ö ====================
// –£–≤–µ–¥–æ–º–ª—è–µ–º –í–ö —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
if (typeof window !== 'undefined') {
    // –î–ª—è –í–ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    if (window.parent && window.parent !== window) {
        try {
            window.parent.postMessage('VKWebAppInit', '*');
            console.log('üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ VKWebAppInit –¥–ª—è –í–ö');
        } catch (e) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å VKWebAppInit:', e);
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if (typeof VK !== 'undefined' && VK.init) {
        try {
            VK.init(function() {
                console.log('‚úÖ VK API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
            }, function() {
                console.log('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VK API');
            }, '5.199');
        } catch (e) {
            console.log('‚ö†Ô∏è VK API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e);
        }
    }
}

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================
document.addEventListener('DOMContentLoaded', async function() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TherapyGod...');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showLoadingIndicator();
    
    try {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –Ω–∞ –≤—Å—é –∑–∞–≥—Ä—É–∑–∫—É
        const loadingPromise = loadClinicalCasesSimple();
        const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => reject(new Error('Timeout: –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏')), 10000);
        });
        
        await Promise.race([loadingPromise, timeoutPromise]);
        
        console.log('‚úÖ –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª—É—á–∞–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        hideLoadingIndicator();
        setupEventHandlers();
        console.log('‚úÖ TherapyGod –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –í–ö –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        notifyVKAppReady();
        
    } catch (error) {
        console.error('‚ùå –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò:', error);
        hideLoadingIndicator();
        
        if (loadingAttempts < MAX_LOADING_ATTEMPTS) {
            loadingAttempts++;
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ ${loadingAttempts}/${MAX_LOADING_ATTEMPTS}...`);
            setTimeout(() => location.reload(), 2000);
        } else {
            showErrorMessage(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ ${MAX_LOADING_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.`);
        }
    }
});

// ==================== –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –í–ö –û –ì–û–¢–û–í–ù–û–°–¢–ò ====================
function notifyVKAppReady() {
    try {
        // –î–ª—è –í–ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        if (window.parent && window.parent !== window) {
            window.parent.postMessage({
                type: 'VKWebAppUpdateConfig',
                data: {
                    app_id: window.location.hostname,
                    status: 'ready'
                }
            }, '*');
            
            window.parent.postMessage('VKWebAppInit', '*');
            console.log('üì± –£–≤–µ–¥–æ–º–∏–ª–∏ –í–ö –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è VK Bridge API
        if (typeof vkBridge !== 'undefined') {
            vkBridge.send('VKWebAppInit');
            console.log('üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ VKWebAppInit —á–µ—Ä–µ–∑ vkBridge');
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        setTimeout(() => {
            const startScreen = document.getElementById('start-screen');
            if (startScreen) {
                startScreen.style.opacity = '1';
                startScreen.style.visibility = 'visible';
                console.log('üéØ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
            }
        }, 1000);
        
    } catch (error) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –í–ö:', error);
    }
}

// ==================== –£–ü–†–û–©–ï–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –°–õ–£–ß–ê–ï–í ====================
async function loadClinicalCasesSimple() {
    console.log('üì• –ù–∞—á–∏–Ω–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å–ª—É—á–∞–µ–≤...');
    
    const caseFiles = [
        { file: 'cases/cardiovascular.js', variable: 'cardiovascularCases', system: 'cardiovascular' },
        { file: 'cases/respiratory.js', variable: 'respiratoryCases', system: 'respiratory' },
        { file: 'cases/gastrointestinal.js', variable: 'gastrointestinalCases', system: 'gastrointestinal' },
        { file: 'cases/nervous.js', variable: 'nervousCases', system: 'nervous' },
        { file: 'cases/endocrine.js', variable: 'endocrineCases', system: 'endocrine' },
        { file: 'cases/renal.js', variable: 'renalCases', system: 'renal' }
    ];

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –Ω–æ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const loadPromises = caseFiles.map(caseFile => 
        loadSingleScript(caseFile.file).then(() => caseFile)
    );
    
    console.log('‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ...');
    await Promise.all(loadPromises);
    
    // –î–∞–µ–º –≤—Ä–µ–º—è —Å–∫—Ä–∏–ø—Ç–∞–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
    console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤...');
    await new Promise(resolve => setTimeout(resolve, 500));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    clinicalCases = {};
    let totalCasesLoaded = 0;

    for (const caseFile of caseFiles) {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ${caseFile.variable}...`);
        
        const cases = window[caseFile.variable];
        
        if (!cases) {
            throw new Error(`–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${caseFile.variable} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª ${caseFile.file}`);
        }
        
        if (!Array.isArray(cases) || cases.length === 0) {
            throw new Error(`${caseFile.variable} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ –ø—É—Å—Ç`);
        }
        
        clinicalCases[caseFile.system] = cases;
        totalCasesLoaded += cases.length;
        
        console.log(`‚úÖ ${caseFile.system}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${cases.length} —Å–ª—É—á–∞–µ–≤`);
    }

    if (totalCasesLoaded === 0) {
        throw new Error('–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–ª—É—á–∞—è');
    }

    console.log(`üéâ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${totalCasesLoaded} –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤`);
}

// ==================== –ü–†–û–°–¢–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –û–î–ù–û–ì–û –°–ö–†–ò–ü–¢–ê ====================
function loadSingleScript(src) {
    return new Promise((resolve, reject) => {
        console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç: ${src}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ
        const existingScript = document.querySelector(`script[src="${src}"]`);
        if (existingScript) {
            console.log(`‚úÖ –°–∫—Ä–∏–ø—Ç —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω: ${src}`);
            resolve();
            return;
        }

        const script = document.createElement('script');
        script.src = src;
        script.type = 'text/javascript';
        script.async = false;
        
        // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
        const timeout = setTimeout(() => {
            script.remove();
            reject(new Error(`–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞: ${src}`));
        }, 5000);

        script.onload = () => {
            clearTimeout(timeout);
            console.log(`‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: ${src}`);
            resolve();
        };
        
        script.onerror = (error) => {
            clearTimeout(timeout);
            script.remove();
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${src}`, error);
            reject(new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: ${src}`));
        };

        document.head.appendChild(script);
    });
}

// ==================== –ò–ù–î–ò–ö–ê–¢–û–† –ó–ê–ì–†–£–ó–ö–ò ====================
function showLoadingIndicator() {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    const existingLoader = document.getElementById('loading-indicator');
    if (existingLoader) existingLoader.remove();
    
    const loader = document.createElement('div');
    loader.id = 'loading-indicator';
    loader.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(15, 23, 42, 0.95);
        z-index: 9999;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        color: white;
        font-family: -apple-system, BlinkMacSystemFont, sans-serif;
    `;
    
    loader.innerHTML = `
        <div style="
            width: 60px;
            height: 60px;
            border: 4px solid rgba(37, 99, 235, 0.3);
            border-top: 4px solid #2563eb;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 20px;
        "></div>
        <div style="font-size: 18px; font-weight: 600; margin-bottom: 10px;">
            –ó–∞–≥—Ä—É–∑–∫–∞ TherapyGod...
        </div>
        <div style="font-size: 14px; opacity: 0.7;">
            –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª—É—á–∞–∏
        </div>
        <style>
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        </style>
    `;
    
    document.body.appendChild(loader);
}

function hideLoadingIndicator() {
    const loader = document.getElementById('loading-indicator');
    if (loader) {
        loader.style.opacity = '0';
        loader.style.transition = 'opacity 0.3s ease';
        setTimeout(() => loader.remove(), 300);
    }
}

// ==================== –ü–û–ö–ê–ó –û–®–ò–ë–ö–ò ====================
function showErrorMessage(message) {
    const errorDiv = document.createElement('div');
    errorDiv.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(239, 68, 68, 0.95);
        color: white;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        z-index: 10000;
        max-width: 500px;
        text-align: center;
        font-family: -apple-system, BlinkMacSystemFont, sans-serif;
        font-size: 16px;
        line-height: 1.5;
    `;
    
    errorDiv.innerHTML = `
        <h3 style="margin: 0 0 15px 0; font-size: 20px;">‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
        <p style="margin: 0 0 20px 0;">${message}</p>
        <button onclick="location.reload()" style="
            background: white;
            color: #ef4444;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: bold;
            cursor: pointer;
            font-size: 14px;
            margin-right: 10px;
        ">üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button>
        <button onclick="this.parentElement.remove()" style="
            background: rgba(255,255,255,0.2);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: bold;
            cursor: pointer;
            font-size: 14px;
        ">‚úï –ó–∞–∫—Ä—ã—Ç—å</button>
    `;
    
    document.body.appendChild(errorDiv);
}

// ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ====================
function setupEventHandlers() {
    console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');

    // –í—ã–±–æ—Ä —Å–∏—Å—Ç–µ–º—ã –æ—Ä–≥–∞–Ω–æ–≤
    const systemCards = document.querySelectorAll('.system-card');
    console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–∏—Å—Ç–µ–º: ${systemCards.length}`);
    
    systemCards.forEach(card => {
        card.addEventListener('click', () => selectSystem(card));
    });

    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const buttons = {
        'start-cases': startCases,
        'next-case': nextCase,
        'exit-cases': exitCases,
        'restart-cases': restartCases
    };

    Object.entries(buttons).forEach(([id, handler]) => {
        const element = document.getElementById(id);
        if (element) {
            element.addEventListener('click', handler);
            console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è: ${id}`);
        } else {
            console.warn(`‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${id}`);
        }
    });

    console.log('‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

// ==================== –í–´–ë–û–† –°–ò–°–¢–ï–ú–´ ====================
function selectSystem(card) {
    console.log('üéØ –í—ã–±–æ—Ä —Å–∏—Å—Ç–µ–º—ã:', card.dataset.system);
    
    document.querySelectorAll('.system-card').forEach(c => c.classList.remove('active'));
    card.classList.add('active');
    gameState.currentSystem = card.dataset.system;
    
    console.log('‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞:', gameState.currentSystem);
}

// ==================== –ó–ê–ü–£–°–ö –ò–ì–†–´ ====================
function startCases() {
    console.log('üéÆ === –ó–ê–ü–£–°–ö –ò–ì–†–´ ===');
    console.log('–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:', gameState.currentSystem);
    
    if (Object.keys(clinicalCases).length === 0) {
        showErrorMessage('–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª—É—á–∞–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        return;
    }
    
    const systemCases = clinicalCases[gameState.currentSystem];
    
    if (!systemCases || systemCases.length === 0) {
        showErrorMessage(`–°–ª—É—á–∞–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã "${gameState.currentSystem}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!`);
        return;
    }

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${systemCases.length} —Å–ª—É—á–∞–µ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã ${gameState.currentSystem}`);

    gameState.currentCases = shuffleArray([...systemCases]).slice(0, Math.min(gameState.totalCases, systemCases.length));
    gameState.currentCaseIndex = 0;
    gameState.score = 0;
    gameState.selectedOption = null;

    const startScreen = document.getElementById('start-screen');
    const caseContainer = document.getElementById('case-container');
    
    if (startScreen) startScreen.style.display = 'none';
    if (caseContainer) {
        caseContainer.style.display = 'block';
        loadCase();
    } else {
        showErrorMessage('–≠–ª–µ–º–µ–Ω—Ç case-container –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    }
}

// ==================== –ó–ê–ì–†–£–ó–ö–ê –°–õ–£–ß–ê–Ø ====================
function loadCase() {
    console.log(`üìÑ === –ó–ê–ì–†–£–ó–ö–ê –°–õ–£–ß–ê–Ø ${gameState.currentCaseIndex + 1} ===`);
    
    if (gameState.currentCaseIndex >= gameState.currentCases.length) {
        showResults();
        return;
    }

    const case_data = gameState.currentCases[gameState.currentCaseIndex];
    gameState.selectedOption = null;

    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    const caseCounter = document.getElementById('case-counter');
    const progressBar = document.getElementById('progress-bar');
    
    if (caseCounter) {
        caseCounter.textContent = `–°–ª—É—á–∞–π ${gameState.currentCaseIndex + 1} –∏–∑ ${gameState.currentCases.length}`;
    }
    
    if (progressBar) {
        const progress = ((gameState.currentCaseIndex) / gameState.currentCases.length) * 100;
        progressBar.style.width = `${progress}%`;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    const caseContent = document.getElementById('case-content');
    if (caseContent) {
        caseContent.innerHTML = `
            <div class="patient-info">–ü–∞—Ü–∏–µ–Ω—Ç: ${case_data.patient}</div>
            <div class="case-description">
                <strong>–ñ–∞–ª–æ–±—ã:</strong> ${case_data.complaint}<br><br>
                <strong>–ê–Ω–∞–º–Ω–µ–∑ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è:</strong> ${case_data.history}<br><br>
                <strong>–û–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π –æ—Å–º–æ—Ç—Ä:</strong> ${case_data.examination}
            </div>
            ${case_data.additional ? `<div class="case-data"><strong>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong><br>${case_data.additional}</div>` : ''}
            <div class="case-question">${case_data.question}</div>
        `;
    }

    // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    const optionsContainer = document.getElementById('options');
    if (optionsContainer) {
        optionsContainer.innerHTML = '';
        
        case_data.options.forEach((option, index) => {
            const optionElement = document.createElement('div');
            optionElement.classList.add('option');
            optionElement.textContent = option;
            optionElement.dataset.index = index;
            optionElement.addEventListener('click', () => selectOption(optionElement, index));
            optionsContainer.appendChild(optionElement);
        });
    }

    // –°–∫—Ä—ã–≤–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏ –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
    const explanation = document.getElementById('explanation');
    const nextBtn = document.getElementById('next-case');
    
    if (explanation) explanation.classList.remove('show');
    if (nextBtn) nextBtn.disabled = true;

    console.log('‚úÖ –°–ª—É—á–∞–π –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
}

// ==================== –í–´–ë–û–† –û–¢–í–ï–¢–ê ====================
function selectOption(element, index) {
    if (gameState.selectedOption !== null) return;

    gameState.selectedOption = index;
    const case_data = gameState.currentCases[gameState.currentCaseIndex];
    const isCorrect = index === case_data.correct;

    const options = document.querySelectorAll('.option');
    if (options[case_data.correct]) {
        options[case_data.correct].classList.add('correct');
    }
    
    if (!isCorrect) {
        element.classList.add('wrong');
    }

    options.forEach(opt => opt.style.pointerEvents = 'none');

    const explanationText = document.getElementById('explanation-text');
    const explanation = document.getElementById('explanation');
    
    if (explanationText) explanationText.textContent = case_data.explanation;
    if (explanation) explanation.classList.add('show');

    const nextBtn = document.getElementById('next-case');
    if (nextBtn) nextBtn.disabled = false;

    if (isCorrect) gameState.score++;
}

// ==================== –ù–ê–í–ò–ì–ê–¶–ò–Ø ====================
function nextCase() {
    gameState.currentCaseIndex++;
    loadCase();
}

function exitCases() {
    const caseContainer = document.getElementById('case-container');
    const startScreen = document.getElementById('start-screen');
    
    if (caseContainer) caseContainer.style.display = 'none';
    if (startScreen) startScreen.style.display = 'block';
}

function restartCases() {
    const resultsContainer = document.getElementById('results-container');
    const startScreen = document.getElementById('start-screen');
    
    if (resultsContainer) resultsContainer.style.display = 'none';
    if (startScreen) startScreen.style.display = 'block';
}

// ==================== –ü–û–ö–ê–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ====================
function showResults() {
    const caseContainer = document.getElementById('case-container');
    const resultsContainer = document.getElementById('results-container');
    
    if (caseContainer) caseContainer.style.display = 'none';
    if (resultsContainer) resultsContainer.style.display = 'block';

    const percentage = Math.round((gameState.score / gameState.currentCases.length) * 100);
    
    const percentageElement = document.getElementById('percentage');
    const correctAnswers = document.getElementById('correct-answers');
    const totalQuestions = document.getElementById('total-questions');
    const resultMessage = document.getElementById('result-message');
    
    if (percentageElement) percentageElement.textContent = percentage;
    if (correctAnswers) correctAnswers.textContent = gameState.score;
    if (totalQuestions) totalQuestions.textContent = gameState.currentCases.length;

    let resultText;
    if (percentage >= 90) {
        resultText = '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è!';
    } else if (percentage >= 70) {
        resultText = '–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ!';
    } else if (percentage >= 50) {
        resultText = '–•–æ—Ä–æ—à–æ! –ï—Å—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –Ω–æ —Å—Ç–æ–∏—Ç —É–≥–ª—É–±–∏—Ç—å –∑–Ω–∞–Ω–∏—è.';
    } else {
        resultText = '–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏! –ò–∑—É—á–∞–π—Ç–µ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª—É—á–∞–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.';
    }
    
    if (resultMessage) resultMessage.textContent = resultText;
}

// ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
function shuffleArray(array) {
    const newArray = [...array];
    for (let i = newArray.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
    }
    return newArray;
}

// ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô –î–õ–Ø –í–ö ====================
// –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –í–ö
window.addEventListener('message', function(event) {
    if (event.data && typeof event.data === 'object') {
        console.log('üì± –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –í–ö:', event.data);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –í–ö
        switch(event.data.type) {
            case 'VKWebAppUpdateConfig':
                console.log('üì± –í–ö –æ–±–Ω–æ–≤–∏–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
                break;
            case 'VKWebAppViewHide':
                console.log('üì± –í–ö —Å–∫—Ä—ã–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
                break;
            case 'VKWebAppViewRestore':
                console.log('üì± –í–ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
                break;
        }
    }
});

// ==================== –§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø –í–ö ====================
// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
setTimeout(() => {
    try {
        // –ï—â–µ —Ä–∞–∑ —É–≤–µ–¥–æ–º–ª—è–µ–º –í–ö
        if (window.parent && window.parent !== window) {
            window.parent.postMessage('VKWebAppInit', '*');
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        const body = document.body;
        if (body) {
            body.style.opacity = '1';
            body.style.visibility = 'visible';
        }
        
        console.log('üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
}, 2000);
